INTRODUCTION                                    *efmls-configs* *efmls*

An unofficial collection of linters and formatters configured for
efm-langserver to work with the builtin nvim-lsp.

Check out |efmls-configs-supported| for a list of supported languages.

TABLE OF CONTENTS

SETUP ......................................... |efmls-configs-setup|
    PLUGIN API SETUP ...................... |efmls-configs-setup-api|
    STANDALONE SETUP ............... |efmls-configs-setup-standalone|
DEFAULT CONFIGURATIONS ..................... |efmls-configs-defaults|
TROUBLESHOOTING ..................... |efmls-configs-troubleshooting|
EFM LANGSERVER SCHEMA ........................ |efmls-configs-schema|
SUPPORTED LINTERS AND FORMATTERS .......... |efmls-configs-supported|

SETUP                                            *efmls-configs-setup*

There are two ways to setup your tools:

- Plugin API Setup (|efmls-configs-setup-api|) - we provide you with
  everything, with some customization if needed
- Standalone Setup (|efmls-configs-setup-standalone|) - only use the
  plugin provided configurations for you language, customize the rest


PLUGIN API SETUP                            *efmls-configs-setup-api*

You should use this method, when all you need is for us to provide
you with the defaults with some option to customize they way you
want `efm` to work for you.

>lua
    local efmls_config = require('efmls-configs').create_config({
      -- Defaults are an opt-in option
      defaults = true,
    
      -- Provide the tools to use for each languages
      -- or override existing ones if you set `defaults` to true
      languages = {
        typescript = { 'eslint', 'prettier' },
        lua = { 'stylua' },
      },
    })
    
    require('lspconfig').efm.setup(vim.tbl_extend('force', efmls_config, {
      -- Pass your cutom config below like on_attach and capabilities
      -- on_attach = on_attach,
      -- capabilities = capabilities,
    }))
<

STANDALONE SETUP                    *efmls-configs-setup-standalone*

You should use this method, if you just want the bare necessities
and configure the rest for yourself.

>lua
    -- Register linters and formatters per language
    local languages = {
      typescript = {
        require('efmls-configs.linters.eslint'),
        require('efmls-configs.formatters.prettier'),
      },
      lua = {
        require('efmls-configs.formatters.stylua'),
      },
    }
    
    -- Or use the defaults provided by this plugin
    -- local languages = require('efmls-configs.defaults').languages()
    
    local efmls_config = {
      filetypes = vim.tbl_keys(languages),
      settings = {
        rootMarkers = { '.git/' },
        languages = languages,
      },
      init_options = {
        documentFormatting = true,
        documentRangeFormatting = true,
      },
    }
    
    require('lspconfig').efm.setup(vim.tbl_extend('force', efmls_config, {
      -- Pass your cutom config below like on_attach and capabilities
      -- on_attach = on_attach,
      -- capabilities = capabilities,
    }))
<

DEFAULT CONFIGURATIONS                          *efmls-configs-defaults*

Default configurations are an opt-in feature.

To see all the configurations provided by default go to
https://github.com/creativenull/efmls-configs-nvim/blob/main/doc/SUPPORTED_LIST.md

As mentioned in the |efmls-configs-setup-standalone| section, you
can also use a list of defaults provided by this plugin, in-case
you don't want to specify configuration for each language.

>lua
    local languages = require('efmls-configs.defaults').languages()
<

To extend and add additional tools or to override existing
defaults registered:

>lua
    local languages = require('efmls-configs.defaults').languages()
    languages = vim.tbl_extend('force', languages, {
      -- you custom languages, or overrides
      html = {
        require('efmls-configs.formatters.prettier')
      }
    })
<

TROUBLESHOOTING                                 *efmls-configs-issues*

Always run `:checkhealth` to see if there are any issue, when you
get no response from the linter or formatter as you expected.

If you get "no executable found" issues in `:checkhealth`,
this means that the linter or formatter was not found in the provided
filepath. Ensure that it is installed globally or in a valid filepath.

For nodejs/npm, php/composer, ruby/bundler: check if the linter or
formatter is installed in your node_modules (npm), vendor
(composer/bundler) project folder, or installed globally.

EFM-LANGSERVER SCHEMA FILE                       *efmls-configs-schema*

https://github.com/mattn/efm-langserver/blob/master/schema.json

SUPPORTED LINTERS AND FORMATTERS               *efmls-configs-supported*

https://github.com/creativenull/efmls-configs-nvim/blob/main/doc/SUPPORTED_LIST.md

 vim:tw=78:ts=8:noet:ft=help:norl:
